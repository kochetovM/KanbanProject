{"version":3,"sources":["CreateTask.js","ShowcolumnNames.js","DeleteItemModal.js","EditItemModal.js","TaskCard.js","Column.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["CreateTask","props","useState","isOpenCreateTaskForm","setIsOpenCreateTaskForm","taskInput","setTaskInput","priorityInput","setPriorityInput","isActiveButtonTaskCreate","setIsActiveButtonTaskCreate","taskReset","className","onClick","type","placeholder","value","onChange","e","target","length","isnum","test","preventDefault","new_task","id","math","floor","random","name","priority","parseInt","addnewtask","currentlist","setList","disabled","ShowcolumnNames","data-toggle","aria-haspopup","aria-expanded","console","log","columns_names","current_column_name","class","map","column","href","move_to","index","DeleteItemModal","tabIndex","role","aria-hidden","data-dismiss","aria-label","title","delete_post","EditItemModal","task_obj","currentTaskName","setTaskName","currentPriority","setPriority","modal_id","htmlFor","updatedtask","create_updated_list","el","save_updated_list","onClickSaveChanges","icon_up","width","height","viewBox","fill","xmlns","fill-rule","d","icon_down","icon_trash","icon_edit","TaskCard","modal_id_edit","toString","key","data-target","move_up","move_down","Object","keys","ColumnsNames_and_Headers","Column","column_name","current_column_list","column_Setfunc","sort_bypriority","i","Board","todo_start","dolist","setDolist","progress_start","progress","setProgress","review_start","review","setReview","done_start","done","setDone","allcolumns_state","newtask","post","listcopy","splice","filter","name_to","index_from","setcurrentList","copy_el","copylist2","push","updated_list","sortedlist","max","index_max","forEach","build_column","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.02405086.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport math from 'math';\n\n\nfunction CreateTask(props) {\n\n    const [isOpenCreateTaskForm, setIsOpenCreateTaskForm] = useState(false);\n    const [taskInput, setTaskInput] = useState('');\n    const [priorityInput, setPriorityInput] = useState('');\n    const [isActiveButtonTaskCreate, setIsActiveButtonTaskCreate] = useState(false);\n\n    const openCreateTaskForm = () => {\n        setIsOpenCreateTaskForm(true);\n    };\n    const onTaskChange = (e) => {\n        setIsActiveButtonTaskCreate(e.target.value.length > 4);\n        setTaskInput(e.target.value);\n    };\n    const onPriorityChange = (e) => {\n        let isnum = /^\\d+$/.test(e.target.value);\n        if (!isnum) { setPriorityInput(priorityInput) }\n        else { setPriorityInput(e.target.value); }\n    };\n\n    const taskReset = () => {\n        setTaskInput('');\n        setIsOpenCreateTaskForm(false);\n        setIsActiveButtonTaskCreate(false);\n        setPriorityInput('');\n    };\n\n    const taskSubmit = (e) => {\n        e.preventDefault();\n        //console.log(taskInput);\n        //console.log(priorityInput);\n        const new_task= {\n            id: math.floor( math.random()*10000),\n            name: taskInput,\n            priority: parseInt(priorityInput)\n        }\n\n        props.addnewtask(new_task,props.currentlist,props.setList); // Adding new task to our toDo list\n\n        taskReset();\n    };\n\n    return (\n        <>\n            {!isOpenCreateTaskForm &&\n            <button className=\"btn btn-sm btn-outline-info \" onClick={openCreateTaskForm}>New</button>}\n\n            {isOpenCreateTaskForm &&\n            <form className=\"addnewitem_style\">\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control\"\n                           placeholder={\"Enter a new task...\"}\n                           value={taskInput}\n                           onChange={onTaskChange}/>\n                    <input type=\"text\" className=\"\"\n                           placeholder={\"Priority of task\"}\n                           value={priorityInput}\n                           onChange={onPriorityChange}/>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\"\n                        onClick={taskSubmit}\n                        disabled={!isActiveButtonTaskCreate}>Submit\n                </button>\n                <button className=\"btn btn-secondary\"\n                        onClick={taskReset}\n                >Cancel\n                </button>\n            </form>\n            }\n        </>\n\n    );\n}\n\nexport default CreateTask;","import React, {useState} from 'react';\n\nfunction ShowcolumnNames(props) {\n    return (\n       <div className=\"btn-group dropright\">\n            <button className=\"btn btn-sm btn-secondary dropdown-toggle\" type=\"button\"\n                    data-toggle=\"dropdown\"  aria-haspopup=\"true\" aria-expanded=\"true\"\n                    onClick={() => {console.log(props.columns_names);\n                        console.log(props.current_column_name) }} > Move to\n            </button>\n\n           <div class=\"dropdown-menu\"  >\n                    {props.columns_names.map( column => {\n                            if (column != props.current_column_name)  {\n                                return(\n                                <div>\n                                    <a className=\"dropdown-item\" href=\"#\" onClick={() => {\n                                        props.move_to(column, props.index, props.currentlist, props.setList); }\n                                    }> {column} </a>\n                                </div> ) }\n                            })\n                    }\n            </div>\n        </div>\n    )\n}\n\nexport default ShowcolumnNames;","import React from \"react\";\n\nfunction DeleteItemModal(props) {\n\n    const onClickDelete = () => {\n        props.delete_post(props.id, props.currentlist,props.setList );\n    };\n\n    return (\n        <div className=\"modal fade\" id={props.id} tabIndex=\"-1\" role=\"dialog\"  aria-hidden=\"true\">\n            <div className=\"modal-dialog\" role=\"document\">\n\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">Are you sure you want to delete this task?</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        {props.title}\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">\n                            Close</button>\n                        <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={() => onClickDelete()} >\n                            Delete</button>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    );\n};\n\n\n\n\nexport default DeleteItemModal;","import React, {useState} from \"react\";\n\nfunction EditItemModal(props) {\n\n    const [currentTaskName, setTaskName] = useState(props.task_obj.name);\n    const [currentPriority, setPriority] = useState(props.task_obj.priority);\n\n    const onTaskNameChange = (e) => {\n        setTaskName(e.target.value);\n    };\n    const onPriorityChange = (e) => {\n        let isnum = /^\\d+$/.test(e.target.value);\n        if (!isnum) { setPriority(currentPriority) }\n        else { setPriority(e.target.value); }\n    };\n\n    const onClickSaveChanges = () => {\n        //Сохраняем изменения\n       // props.edit_post(props.id, props.currentlist,props.setList );\n        const updatedtask = {\n            id: props.task_obj.id,\n            name: currentTaskName,\n            priority: parseInt(currentPriority)\n        };\n\n        const create_updated_list = props.currentlist.map( el => (el.id===props.task_obj.id) ? updatedtask : el  )\n        props.save_updated_list(create_updated_list,props.setList);\n    };\n\n    return (\n        <div className=\"modal fade\" id={props.modal_id} tabIndex=\"-1\" role=\"dialog\"  aria-hidden=\"true\">\n            <div className=\"modal-dialog\" role=\"document\">\n\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">Edit task</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"formInput\">Task</label>\n                            <input type=\"text\" className=\"form-control\" id=\"formInput\"\n                                   value={currentTaskName} onChange={onTaskNameChange}/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"formInput\">Priority</label>\n                            <input type=\"text\" className=\"form-control\" id=\"formInput\"\n                                   value={currentPriority} onChange={onPriorityChange}/>\n                        </div>\n                    </div>\n\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">\n                            Close</button>\n                        <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={() => onClickSaveChanges()} >\n                            Save</button>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    );\n};\n\n\nexport default EditItemModal;","import React, {useState} from 'react';\nimport ShowcolumnNames from \"./ShowcolumnNames\";\nimport DeleteItemModal from \"./DeleteItemModal\";\nimport EditItemModal from \"./EditItemModal\";\nimport math from \"math\";\n\nconst icon_up =(<svg\n    className=\"bi bi-arrow-up-square\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n    xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\"\n          d=\"M14 1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>\n    <path fill-rule=\"evenodd\"\n          d=\"M4.646 8.354a.5.5 0 0 0 .708 0L8 5.707l2.646 2.647a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 0 0 0 .708z\"/>\n    <path fill-rule=\"evenodd\" d=\"M8 11.5a.5.5 0 0 0 .5-.5V6a.5.5 0 0 0-1 0v5a.5.5 0 0 0 .5.5z\"/>\n</svg>);\n\nconst icon_down = ( <svg className=\"bi bi-arrow-down-square\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\"\n     fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\"\n          d=\"M14 1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>\n    <path fill-rule=\"evenodd\"\n          d=\"M4.646 7.646a.5.5 0 0 1 .708 0L8 10.293l2.646-2.647a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 0 1 0-.708z\"/>\n    <path fill-rule=\"evenodd\" d=\"M8 4.5a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5z\"/>\n    </svg>);\n\nconst icon_trash = (<svg className=\"bi bi-trash\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                         xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n        d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n    <path fill-rule=\"evenodd\"\n          d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n    </svg>);\n\nconst icon_edit = (<svg className=\"bi bi-pencil-square\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n        d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456l-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\"/>\n    <path fill-rule=\"evenodd\"\n          d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"/>\n    </svg>);\n\n\nfunction TaskCard(props) {\n\n    const modal_id_edit=props.el.id.toString()+props.el.id.toString();\n\n    return (\n      <div className=\"card Cardstyle\" key={props.el.id}>\n          <div className=\"card-body\" >\n\n              <div className=\"row\">\n\n                  <div className=\"col-sm-9\">\n                      <h5 class=\"card-title\"> {props.el.name} </h5>\n                  </div>\n\n                  <div className=\"col-sm-3\">\n                      <span className=\"btn-outline-info\" data-toggle=\"modal\" data-target={\"#\"+modal_id_edit} >\n                          {icon_edit}  </span>\n                      <EditItemModal modal_id={modal_id_edit} task_obj={props.el} currentlist={props.currentlist} setList={props.setList} save_updated_list={props.save_updated_list} />\n                  </div>\n              </div>\n\n              <p> Priority: {props.el.priority}</p>\n\n              <div className=\"buttons_group\">\n                  <span className=\"spanstyle btn-outline-info \" onClick={() => props.move_up(props.el.id, props.currentlist,props.setList )  } >\n                      {icon_up} </span>\n\n                  <sapn className=\"spanstyle btn-outline-info\" onClick={() => props.move_down(props.el.id, props.currentlist, props.setList )} >\n                       {icon_down}  </sapn>\n\n                  <span className=\"spanstyle btn-outline-info\" data-toggle=\"modal\" data-target={\"#\"+props.el.id}>\n                        {icon_trash} </span>\n                  <DeleteItemModal delete_post={props.delete_post} title={props.el.name} id={props.el.id} currentlist={props.currentlist} setList={props.setList} />\n              </div>\n\n              {/*Далее происходит меню на выбор перехода в колонку */}\n              <div className=\"\">\n                    <ShowcolumnNames current_column_name={props.current_column_name} columns_names={Object.keys(props.ColumnsNames_and_Headers)}  index={props.index} move_to={props.move_to}  setList={props.setList} currentlist={props.currentlist} />\n              </div>\n\n          </div>\n\n      </div>\n\n  );\n}\n\nexport default TaskCard;","import React, {useState} from 'react';\nimport CreateTask from \"./CreateTask\";\nimport TaskCard from \"./TaskCard\";\n\n\nfunction Column(props) {\n\n    return (\n        <div className=\"col columnstyle\" >\n            <h5>{props.ColumnsNames_and_Headers[props.column_name]}</h5>\n            <div className=\"columnheader\">\n                <CreateTask addnewtask={props.addnewtask} current_column_list={props.current_column_list} setList={props.column_Setfunc} />\n                <button type=\"button\" className=\"stepahead btn btn-sm btn-outline-info \"  onClick={() => props.sort_bypriority(props.current_column_list,props.column_Setfunc )  }>\n                    Sort.. </button>\n            </div>\n            <div>\n                { props.current_column_list.map((el,i) =>\n                    <TaskCard\n                    el={el} index={i}\n                    currentlist={props.current_column_list}\n                    setList={props.column_Setfunc}\n                    current_column_name={props.column_name}\n                    ColumnsNames_and_Headers={props.ColumnsNames_and_Headers}\n\n                    delete_post={props.delete_post}\n                    save_updated_list={props.save_updated_list}\n                    move_up={props.move_up}\n                    move_down={props.move_down}\n                    move_to={props.move_to}\n                />)\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default Column;","import React, {useState} from 'react';\nimport Column from \"./Column\"\n\nfunction Board(props) {\n\n  const  [dolist, setDolist] = useState(props.todo_start);\n  const  [progress, setProgress] = useState(props.progress_start);\n  const  [review, setReview] = useState(props.review_start);\n  const  [done, setDone] = useState(props.done_start);\n\n  const ColumnsNames_and_Headers = {\n    'dolist': \"TO DO\",\n    'progress': \"IN PROGRESS\",\n    'review': \"REVIEW\",\n    'done': \"DONE\"\n  };\n  const allcolumns_state= {\n    'dolist': [dolist,setDolist],\n    'progress': [dolist,setProgress],\n    'review': [review,setReview],\n    \"done\": [done,setDone]\n  };\n\n  const addnewtask = (newtask,currentlist,setList ) => {\n    setList(currentlist => [newtask,...currentlist]);\n    //console.log(\"WholeList\",dolist);\n  }\n  const move_up = (id,currentlist,setList) => {\n    //console.log(id);\n    let post=null;\n    let index=0;\n\n    currentlist.map( (el,i) => {\n                if(el.id===id) {  post=el; index=i; }\n    })\n    if (index===0) return;\n\n    let listcopy = [...currentlist];\n    listcopy.splice(index, 1);\n    listcopy.splice((index-1), 0, post);\n    setList(listcopy)\n  };\n\n  const move_down = (id,currentlist,setList ) => {\n    let post=null;\n    let index=0;\n\n    currentlist.map( (el,i) => {\n      if(el.id===id) {  post=el; index=i; }\n    })\n    if (index===currentlist.length-1) return;\n\n    let listcopy = [...currentlist];\n    listcopy.splice(index, 1);\n    listcopy.splice((index+1), 0, post);\n    setList(listcopy)\n  };\n\n  const delete_post = (id,currentlist,setList ) => {\n    //console.log(id);\n    setList( currentlist.filter( el => (el.id!==id) ));\n  };\n\n  const move_to = (name_to,index_from,currentlist,setcurrentList) => {\n\n    const copylist=[...currentlist];\n    const copy_el = copylist[index_from];\n    delete_post(currentlist[index_from].id, currentlist, setcurrentList );//Удаляем задание из тек списка\n\n    const copylist2=[...allcolumns_state[name_to][0]];\n    copylist2.push(copy_el);\n    //setList_byname(name_to,copylist2);\n    allcolumns_state[name_to][1](copylist2);\n  }\n\n  const save_updated_list = (updated_list,setList) => {\n      setList(updated_list);\n  }\n\n  const sort_bypriority = (currentlist, setList ) => {\n    let listcopy = [...currentlist];\n    let sortedlist=[];\n    let max=-1, index_max=0;\n\n    while (listcopy.length!==0){\n        let max=-1, index_max=0;\n\n        listcopy.forEach( (el,i) => {\n            if (el.priority > max) {\n                  max=el.priority;\n                  index_max = i;\n                  }\n            })\n        sortedlist.push(listcopy[index_max]);\n        listcopy.splice(index_max,1);\n    }\n    setList(sortedlist);\n  }\n\n  const build_column = (column_name,current_column_list,column_Setfunc) => (\n    <Column\n        ColumnsNames_and_Headers = {ColumnsNames_and_Headers}\n        column_name = {column_name}\n        current_column_list = {current_column_list}\n        column_Setfunc = {column_Setfunc}\n\n        sort_bypriority = { sort_bypriority }\n        addnewtask={ addnewtask }\n        delete_post={delete_post}\n        save_updated_list={save_updated_list}\n        move_up={move_up}\n        move_down={move_down}\n        move_to={move_to}\n    />\n  )\n\n  return (\n      <div className=\"Board\">\n\n        <div className=\"row\">\n            <h2>Kanban progect  </h2>\n            <a className=\"stepahead\" href=\"https://github.com/rusbur/KanbanProject\">github link</a>\n        </div>\n\n        <div className=\"row\">\n\n              {build_column('dolist', dolist, setDolist)}\n              {build_column('progress', progress, setProgress)}\n              {build_column('review', review, setReview)}\n              {build_column('done', done, setDone)}\n\n        </div>\n\n      </div>\n\n  );\n}\n\nexport default Board;","import React, { useState } from 'react';\nimport './App.css';\nimport Board from './Board';\n\nconst todo_start = [\n    {\n        id: 11,\n        name: 'Create App1',\n        priority: 10\n    },\n    // <--\n    {\n        id: 12,\n        name: 'Create App2',\n        priority: 23\n    } ,\n    {\n        id: 13,\n        name: 'Create App2',\n        priority: 25\n    }\n];\nconst progress_start = [\n    {\n        id: 15,\n        name: 'Test Module3',\n        priority: 16\n    },\n    {\n        id: 14,\n        name: 'Create F5',\n        priority: 20\n    }\n];\nconst review_start = [\n    {\n        id: 17,\n        name: 'Test Module4',\n        priority: 15\n    },\n    {\n        id: 16,\n        name: 'Create F7',\n        priority: 9\n    },\n    {\n        id: 23,\n        name: 'Create App77',\n        priority: 25\n    }\n];\nconst done_start = [\n    {\n        id: 19,\n        name: 'Create F8',\n        priority: 40\n    }\n];\n\n\nfunction App() {\n  return (\n    <div className=\"Content\">\n      <Board todo_start={todo_start} progress_start={progress_start} review_start={review_start} done_start={done_start}  />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}