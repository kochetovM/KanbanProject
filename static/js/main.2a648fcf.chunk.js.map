{"version":3,"sources":["ShowcolumnNames.js","DeleteItemModal.js","EditItemModal.js","TaskCard.js","CreateTask.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["Showcolumns","props","className","type","data-toggle","aria-haspopup","aria-expanded","class","map","column","column_name","href","onClick","move_to","index","currentlist","setList","DeleteItemModal","id","tabIndex","role","aria-hidden","data-dismiss","aria-label","title","delete_post","EditItemModal","useState","task_obj","name","currentTaskName","setTaskName","priority","currentPriority","setPriority","modal_id","htmlFor","value","onChange","e","target","isnum","test","updatedtask","parseInt","create_updated_list","el","save_updated_list","onClickSaveChanges","icon_up","width","height","viewBox","fill","xmlns","fill-rule","d","icon_down","icon_trash","icon_edit","TaskCard","modal_id_edit","toString","key","data-target","move_up","move_down","ShowcolumnNames","CreateTask","isOpenCreateTaskForm","setIsOpenCreateTaskForm","taskInput","setTaskInput","priorityInput","setPriorityInput","isActiveButtonTaskCreate","setIsActiveButtonTaskCreate","taskReset","placeholder","length","preventDefault","new_task","math","floor","random","addnewtask","disabled","Content","dolist","setDolist","progress","setProgress","review","setReview","done","setDone","newtask","post","i","listcopy","splice","filter","colums","copy_el","copylist2","push","copylist","setList_byname","updated_list","sort_bypriority","sortedlist","max","index_max","forEach","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a648fcf.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nfunction Showcolumns(props) {\n   const colums= [\n       \"dolist\",\n       \"progress\",\n       \"review\",\n       \"done\"\n    ];\n\n    return (\n       <div className=\"btn-group dropright\">\n            <button className=\"btn btn-sm btn-secondary dropdown-toggle\" type=\"button\"\n                    data-toggle=\"dropdown\"  aria-haspopup=\"true\" aria-expanded=\"true\"> Move to\n            </button>\n\n           <div class=\"dropdown-menu\"  >\n                    {colums.map( column => {\n                            if (column != props.column_name)  {\n                                return(\n                                <div>\n                                    <a className=\"dropdown-item\" href=\"#\" onClick={() => {\n                                        props.move_to(column, props.index, props.currentlist, props.setList); }\n                                    }> {column} </a>\n                                </div> ) }\n                            })\n                    }\n            </div>\n        </div>\n    )\n}\n\nexport default Showcolumns;","import React from \"react\";\n\nfunction DeleteItemModal(props) {\n\n    const onClickDelete = () => {\n        props.delete_post(props.id, props.currentlist,props.setList );\n    };\n\n    return (\n        <div className=\"modal fade\" id={props.id} tabIndex=\"-1\" role=\"dialog\"  aria-hidden=\"true\">\n            <div className=\"modal-dialog\" role=\"document\">\n\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">Are you sure you wish to delete this task?</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        {props.title}\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">\n                            Close</button>\n                        <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={() => onClickDelete()} >\n                            Delete</button>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    );\n};\n\n\n\n\nexport default DeleteItemModal;","import React, {useState} from \"react\";\n\nfunction EditItemModal(props) {\n\n    const [currentTaskName, setTaskName] = useState(props.task_obj.name);\n    const [currentPriority, setPriority] = useState(props.task_obj.priority);\n\n    const onTaskNameChange = (e) => {\n        setTaskName(e.target.value);\n    };\n    const onPriorityChange = (e) => {\n        let isnum = /^\\d+$/.test(e.target.value);\n        if (!isnum) { setPriority(currentPriority) }\n        else { setPriority(e.target.value); }\n    };\n\n    const onClickSaveChanges = () => {\n        //Сохраняем изменения\n       // props.edit_post(props.id, props.currentlist,props.setList );\n        const updatedtask = {\n            id: props.task_obj.id,\n            name: currentTaskName,\n            priority: parseInt(currentPriority)\n        };\n\n        const create_updated_list = props.currentlist.map( el => (el.id===props.task_obj.id) ? updatedtask : el  )\n        props.save_updated_list(create_updated_list,props.setList);\n    };\n\n    return (\n        <div className=\"modal fade\" id={props.modal_id} tabIndex=\"-1\" role=\"dialog\"  aria-hidden=\"true\">\n            <div className=\"modal-dialog\" role=\"document\">\n\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">Edit task</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"formInput\">Task</label>\n                            <input type=\"text\" className=\"form-control\" id=\"formInput\"\n                                   value={currentTaskName} onChange={onTaskNameChange}/>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"formInput\">Priority</label>\n                            <input type=\"text\" className=\"form-control\" id=\"formInput\"\n                                   value={currentPriority} onChange={onPriorityChange}/>\n                        </div>\n                    </div>\n\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">\n                            Close</button>\n                        <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\" onClick={() => onClickSaveChanges()} >\n                            Save</button>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    );\n};\n\n\nexport default EditItemModal;","import React, {useState} from 'react';\nimport ShowcolumnNames from \"./ShowcolumnNames\";\nimport DeleteItemModal from \"./DeleteItemModal\";\nimport EditItemModal from \"./EditItemModal\";\nimport math from \"math\";\n\nconst icon_up =(<svg\n    className=\"bi bi-arrow-up-square\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n    xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\"\n          d=\"M14 1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>\n    <path fill-rule=\"evenodd\"\n          d=\"M4.646 8.354a.5.5 0 0 0 .708 0L8 5.707l2.646 2.647a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 0 0 0 .708z\"/>\n    <path fill-rule=\"evenodd\" d=\"M8 11.5a.5.5 0 0 0 .5-.5V6a.5.5 0 0 0-1 0v5a.5.5 0 0 0 .5.5z\"/>\n</svg>);\n\nconst icon_down = ( <svg className=\"bi bi-arrow-down-square\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\"\n     fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\"\n          d=\"M14 1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>\n    <path fill-rule=\"evenodd\"\n          d=\"M4.646 7.646a.5.5 0 0 1 .708 0L8 10.293l2.646-2.647a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 0 1 0-.708z\"/>\n    <path fill-rule=\"evenodd\" d=\"M8 4.5a.5.5 0 0 1 .5.5v5a.5.5 0 0 1-1 0V5a.5.5 0 0 1 .5-.5z\"/>\n    </svg>);\n\nconst icon_trash = (<svg className=\"bi bi-trash\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                         xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n        d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\"/>\n    <path fill-rule=\"evenodd\"\n          d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"/>\n    </svg>);\n\nconst icon_edit = (<svg className=\"bi bi-pencil-square\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                        xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n        d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456l-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\"/>\n    <path fill-rule=\"evenodd\"\n          d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\"/>\n    </svg>);\n\n\nfunction TaskCard(props) {\n\n    const modal_id_edit=props.el.id.toString()+props.el.id.toString();\n\n    return (\n      <div className=\"card Cardstyle\" key={props.el.id}>\n          <div className=\"card-body\" >\n\n              <div className=\"row\">\n\n                  <div className=\"col-sm-9\">\n                      <h5 class=\"card-title\"> {props.el.name} </h5>\n                  </div>\n\n                  <div className=\"col-sm-3\">\n                      <span className=\"btn-outline-info\" data-toggle=\"modal\" data-target={\"#\"+modal_id_edit} >\n                          {icon_edit}  </span>\n                      <EditItemModal modal_id={modal_id_edit} task_obj={props.el} currentlist={props.currentlist} setList={props.setList} save_updated_list={props.save_updated_list} />\n                  </div>\n              </div>\n\n              <p> Priority: {props.el.priority}</p>\n\n              <div className=\"buttons_group\">\n                  <span className=\"spanstyle btn-outline-info \" onClick={() => props.move_up(props.el.id, props.currentlist,props.setList )  } >\n                      {icon_up} </span>\n\n                  <sapn className=\"spanstyle btn-outline-info\" onClick={() => props.move_down(props.el.id, props.currentlist, props.setList )} >\n                       {icon_down}  </sapn>\n\n                  <span className=\"spanstyle btn-outline-info\" data-toggle=\"modal\" data-target={\"#\"+props.el.id}>\n                        {icon_trash} </span>\n                  <DeleteItemModal delete_post={props.delete_post} title={props.el.name} id={props.el.id} currentlist={props.currentlist} setList={props.setList} />\n              </div>\n\n              {/*Далее происходит меню на выбор перехода в колонку */}\n              <div className=\"\">\n                    <ShowcolumnNames  column_name={props.column_name} index={props.index} move_to={props.move_to}  setList={props.setList} currentlist={props.currentlist} />\n              </div>\n\n          </div>\n\n      </div>\n\n  );\n}\n\nexport default TaskCard;","import React, {useState} from 'react';\nimport './App.css';\nimport math from 'math';\n\n\nfunction CreateTask(props) {\n\n    const [isOpenCreateTaskForm, setIsOpenCreateTaskForm] = useState(false);\n    const [taskInput, setTaskInput] = useState('');\n    const [priorityInput, setPriorityInput] = useState('');\n    const [isActiveButtonTaskCreate, setIsActiveButtonTaskCreate] = useState(false);\n\n    const openCreateTaskForm = () => {\n        setIsOpenCreateTaskForm(true);\n    };\n    const onTaskChange = (e) => {\n        setIsActiveButtonTaskCreate(e.target.value.length > 4);\n        setTaskInput(e.target.value);\n    };\n    const onPriorityChange = (e) => {\n        let isnum = /^\\d+$/.test(e.target.value);\n        if (!isnum) { setPriorityInput(priorityInput) }\n        else { setPriorityInput(e.target.value); }\n    };\n\n    const taskReset = () => {\n        setTaskInput('');\n        setIsOpenCreateTaskForm(false);\n        setIsActiveButtonTaskCreate(false);\n        setPriorityInput('');\n    };\n\n    const taskSubmit = (e) => {\n        e.preventDefault();\n        //console.log(taskInput);\n        //console.log(priorityInput);\n        const new_task= {\n            id: math.floor( math.random()*10000),\n            name: taskInput,\n            priority: parseInt(priorityInput)\n        }\n\n        props.addnewtask(new_task,props.currentlist,props.setList); // Adding new task to our toDo list\n\n        taskReset();\n    };\n\n    return (\n        <>\n            {!isOpenCreateTaskForm &&\n            <button className=\"btn btn-sm btn-outline-info \" onClick={openCreateTaskForm}>New</button>}\n\n            {isOpenCreateTaskForm &&\n            <form className=\"addnewitem_style\">\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control\"\n                           placeholder={\"Enter a new task...\"}\n                           value={taskInput}\n                           onChange={onTaskChange}/>\n                    <input type=\"text\" className=\"\"\n                           placeholder={\"Priority of task\"}\n                           value={priorityInput}\n                           onChange={onPriorityChange}/>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\"\n                        onClick={taskSubmit}\n                        disabled={!isActiveButtonTaskCreate}>Submit\n                </button>\n                <button className=\"btn btn-secondary\"\n                        onClick={taskReset}\n                >Cancel\n                </button>\n            </form>\n            }\n        </>\n\n    );\n}\n\nexport default CreateTask;","import React, {useState} from 'react';\nimport TaskCard from \"./TaskCard\";\nimport CreateTask from \"./CreateTask\";\n\nfunction Content(props) {\n\n  const todo_start = [\n    {\n      id: 11,\n      name: 'Create F1',\n      priority: 10\n    },\n    // <--\n    {\n      id: 12,\n      name: 'Create F2',\n      priority: 23\n    } ,\n    {\n      id: 13,\n      name: 'Create F3',\n      priority: 25\n    }\n  ];\n  const progress_start = [\n    {\n      id: 15,\n      name: 'Create F4',\n      priority: 16\n    },\n    {\n      id: 14,\n      name: 'Create F5',\n      priority: 20\n    }\n  ];\n  const review_start = [\n    {\n      id: 17,\n      name: 'Create F6',\n      priority: 15\n    },\n    {\n      id: 16,\n      name: 'Create F7',\n      priority: 9\n    }\n  ];\n  const done_start = [\n    {\n      id: 19,\n      name: 'Create F8',\n      priority: 40\n    }\n  ];\n\n  const  [dolist, setDolist] = useState(todo_start);\n  const  [progress, setProgress] = useState(progress_start);\n  const  [review, setReview] = useState(review_start);\n  const  [done, setDone] = useState(done_start);\n\n  const addnewtask = (newtask,currentlist,setList ) => {\n    setList(currentlist => [newtask,...currentlist]);\n    //console.log(\"WholeList\",dolist);\n  }\n  const move_up = (id,currentlist,setList) => {\n    //console.log(id);\n    let post=null;\n    let index=0;\n\n    currentlist.map( (el,i) => {\n                if(el.id===id) {  post=el; index=i; }\n    })\n    if (index===0) return;\n\n    let listcopy = [...currentlist];\n    listcopy.splice(index, 1);\n    listcopy.splice((index-1), 0, post);\n    setList(listcopy)\n  };\n\n  const move_down = (id,currentlist,setList ) => {\n    let post=null;\n    let index=0;\n\n    currentlist.map( (el,i) => {\n      if(el.id===id) {  post=el; index=i; }\n    })\n    if (index===currentlist.length-1) return;\n\n    let listcopy = [...currentlist];\n    listcopy.splice(index, 1);\n    listcopy.splice((index+1), 0, post);\n    setList(listcopy)\n  };\n\n  const delete_post = (id,currentlist,setList ) => {\n    //console.log(id);\n    setList( currentlist.filter( el => (el.id!==id) ));\n  };\n  const setList_byname = (name,copylist) => {\n\n    if (name=='dolist') {setDolist(copylist)};\n    if (name=='progress') {setProgress(copylist)};\n    if (name=='review') {setReview(copylist)};\n    if (name=='done') {setDone(copylist)};\n\n  }\n\n    const ColumnsName_Header = [\n        \"TO DO\",\n        \"IN PROGRESS\",\n        \"REVIEW\",\n        \"DONE\"\n    ];\n\n  const move_to = (name,index,currentlist,setList) => {\n  const colums= {\n      'dolist': dolist,\n      'progress': progress,\n      'review': review,\n      \"done\": done\n  };\n    const copylist=[...currentlist];\n    const copy_el = copylist[index];\n    delete_post(currentlist[index].id, currentlist, setList );//Удаляем задание из тек списка\n\n    const copylist2=[...colums[name]];\n    copylist2.push(copy_el);\n    setList_byname(name,copylist2);\n  }\n\n  const save_updated_list = (updated_list,setList) => {\n      setList(updated_list);\n  }\n\n  const sort_bypriority = (currentlist, setList ) => {\n    let listcopy = [...currentlist];\n    let sortedlist=[];\n    let max=-1, index_max=0;\n\n    while (listcopy.length!==0){\n        let max=-1, index_max=0;\n\n        listcopy.forEach( (el,i) => {\n            if (el.priority > max) {\n                  max=el.priority;\n                  index_max = i;\n                  }\n            })\n        sortedlist.push(listcopy[index_max]);\n        listcopy.splice(index_max,1);\n    }\n    setList(sortedlist);\n  }\n\n  return (\n      <div className=\"Board\">\n\n        <div className=\"row\">\n            <h2>Kanban</h2>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col columnstyle\">\n              <h4> Todo </h4>\n\n              <div className=\"columnheader\">\n                  <CreateTask addnewtask={addnewtask} currentlist={dolist} setList={setDolist} />\n                  <button type=\"button\" className=\"stepahead btn btn-sm btn-outline-info \"  onClick={() => sort_bypriority(dolist,setDolist )  }>\n                      Sort.. </button>\n              </div>\n\n              <div>\n                { dolist.map((el,i) => <TaskCard\n                                           el={el} index={i}\n                                           currentlist={dolist}\n                                           setList={setDolist}\n                                           column_name={\"dolist\"}\n\n                                           delete_post={delete_post}\n                                           save_updated_list={save_updated_list}\n                                           move_up={move_up}\n                                           move_down={move_down}\n                                           move_to={move_to}\n                                           />)\n                }\n              </div>\n          </div>\n\n          <div className=\"col columnstyle\" >\n              <h4>In progress</h4>\n              <div className=\"columnheader\">\n                  <CreateTask addnewtask={addnewtask} currentlist={progress} setList={setProgress} />\n                  <button type=\"button\" className=\"stepahead btn btn-sm btn-outline-info \"  onClick={() => sort_bypriority(progress,setProgress )  }>\n                      Sort.. </button>\n              </div>\n              <div>\n                { progress.map((el,i) => <TaskCard\n                                                 el={el} index={i}\n                                                 currentlist={progress}\n                                                 setList={setProgress}\n                                                 column_name={\"progress\"}\n\n                                                 delete_post={delete_post}\n                                                 save_updated_list={save_updated_list}\n                                                 move_up={move_up}\n                                                 move_down={move_down}\n                                                 move_to={move_to}\n                                                  />)\n                }\n              </div>\n          </div>\n\n            <div className=\"col columnstyle\">\n                <h4> Review</h4>\n\n                    <div className=\"columnheader\">\n                        <CreateTask addnewtask={addnewtask} currentlist={review} setList={setReview} />\n                        <button type=\"button\" className=\"stepahead btn btn-sm btn-outline-info \"  onClick={() => sort_bypriority(review,setReview )  }>\n                            Sort.. </button>\n                    </div>\n\n                  <div>\n                    { review.map((el,i) => <TaskCard  el={el} index={i}\n                                                   currentlist={review}\n                                                   setList={setReview}\n                                                   column_name={\"review\"}\n\n                                                   delete_post={delete_post}\n                                                   save_updated_list={save_updated_list}\n                                                   move_up={move_up}\n                                                   move_down={move_down}\n                                                   move_to={move_to} />)\n                    }\n                  </div>\n\n            </div>\n\n            <div className=\"col columnstyle\">\n                <h4> Done </h4>\n\n                <div className=\"columnheader\">\n                    <CreateTask addnewtask={addnewtask} currentlist={done} setList={setDone} />\n                    <button type=\"button\" className=\"stepahead btn btn-sm btn-outline-info \"  onClick={() => sort_bypriority(done,setDone )  }>\n                        Sort.. </button>\n                </div>\n\n                <div>\n                { done.map((el,i) => <TaskCard  el={el} index={i}\n                                             currentlist={done}\n                                             setList={setDone}\n                                             column_name={\"done\"}\n\n                                             delete_post={delete_post}\n                                             save_updated_list={save_updated_list}\n                                             move_up={move_up}\n                                             move_down={move_down}\n                                             move_to={move_to} />)\n                }\n              </div>\n\n            </div>\n\n        </div>\n\n      </div>\n\n  );\n}\n\nexport default Content;","import React, { useState } from 'react';\nimport './App.css';\nimport Content from './Content';\n\nfunction App() {\n  return (\n    <div className=\"Content\">\n      <Content/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}