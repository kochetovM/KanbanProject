{"version":3,"sources":["Board.js","CreateTask.js","Content.js","App.js","serviceWorker.js","index.js"],"names":["Board","props","className","key","id","el","name","priority","onClick","delete_post","currentlist","setList","move_up","move_down","move_left","leftlist","setLeftList","move_right","rightlist","setRightList","CreateTask","useState","isOpenCreateTaskForm","setIsOpenCreateTaskForm","taskInput","setTaskInput","priorityInput","setPriorityInput","isActiveButtonTaskCreate","setIsActiveButtonTaskCreate","taskReset","type","placeholder","value","onChange","e","target","length","isnum","test","preventDefault","console","log","new_task","math","random","parseInt","addnewtask","disabled","Content","dolist","setDolist","progress","setProgress","review","setReview","done","setDone","post","index","map","i","listcopy","splice","filter","templist","temp_el","forEach","push","sort_bypriority","sortedlist","max","index_max","newtask","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f4f0f797.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nfunction Board(props) {\n\n  return (\n      <div className=\"\">\n          <li key={props.id}>\n              {props.el.name} <br/>Priority: {props.el.priority}\n              <br/>\n\n              <button className=\"btn btn-primary\" onClick={() => props.delete_post(props.el.id, props.currentlist,props.setList )  }>Del\n              </button>\n\n              <button className=\"btn btn-primary\" onClick={() => props.move_up(props.el.id, props.currentlist,props.setList )  }>\n                  <i className=\"glyphicon glyphicon-arrow-up\"></i>\n              </button>\n\n              <button className=\"btn btn-primary\" onClick={() => props.move_down(props.el.id, props.currentlist, props.setList )}>\n                  <i className=\"glyphicon glyphicon-arrow-down\"></i>\n              </button>\n\n              {props.move_left &&\n              <button className=\"btn btn-primary\" onClick={() => props.move_left(props.el.id, props.currentlist, props.leftlist, props.setList, props.setLeftList)}>\n                  <i className=\"glyphicon glyphicon-arrow-left\"></i>\n              </button>}\n\n              {props.move_right &&\n              <button className=\"btn btn-primary\" onClick={() => props.move_right(props.el.id, props.currentlist, props.rightlist, props.setList, props.setRightList )}>\n                  <i className=\"glyphicon glyphicon-arrow-right\"></i>\n              </button>}\n\n          </li>\n\n      </div>\n\n  );\n}\n\nexport default Board;","import React, {useState} from 'react';\nimport './App.css';\nimport math from 'math';\n\n\nfunction CreateTask(props) {\n\n    const [isOpenCreateTaskForm, setIsOpenCreateTaskForm] = useState(false);\n    const [taskInput, setTaskInput] = useState('');\n    const [priorityInput, setPriorityInput] = useState('');\n    const [isActiveButtonTaskCreate, setIsActiveButtonTaskCreate] = useState(false);\n\n    const openCreateTaskForm = () => {\n        setIsOpenCreateTaskForm(true);\n    };\n    const onTaskChange = (e) => {\n        setIsActiveButtonTaskCreate(e.target.value.length > 4);\n        setTaskInput(e.target.value);\n    };\n    const onPriorityChange = (e) => {\n        let isnum = /^\\d+$/.test(e.target.value);\n        if (!isnum) { setPriorityInput(priorityInput) }\n        else { setPriorityInput(e.target.value); }\n    };\n\n    const taskReset = () => {\n        setTaskInput('');\n        setIsOpenCreateTaskForm(false);\n        setIsActiveButtonTaskCreate(false);\n        setPriorityInput('');\n    };\n\n    const taskSubmit = (e) => {\n        e.preventDefault();\n        console.log(taskInput);\n        console.log(priorityInput);\n        const new_task= {\n            id: math.random(),\n            name: taskInput,\n            priority: parseInt(priorityInput)\n        }\n\n        props.addnewtask(new_task); // Adding new task to our toDo list\n\n        taskReset();\n    };\n\n    return (\n        <div className=\"\">\n\n            {!isOpenCreateTaskForm &&\n            <button className=\"btn btn-primary\" onClick={openCreateTaskForm}>Create\n                Task</button>}\n\n            {isOpenCreateTaskForm &&\n            <form>\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control\"\n                           placeholder={\"Enter a new task...\"}\n                           value={taskInput}\n                           onChange={onTaskChange}/>\n                    <input type=\"text\" className=\"\"\n                           placeholder={\"Priority of task\"}\n                           value={priorityInput}\n                           onChange={onPriorityChange}/>\n                </div>\n                <button type=\"submit\" className=\"btn btn-primary\"\n                        onClick={taskSubmit}\n                        disabled={!isActiveButtonTaskCreate}>Submit\n                </button>\n                <button className=\"btn btn-secondary\"\n                        onClick={taskReset}\n                >Cancel\n                </button>\n            </form>\n            }\n\n         </div>\n\n    );\n}\n\nexport default CreateTask;","import React, {useState} from 'react';\nimport './App.css';\nimport Board from \"./Board\";\nimport CreateTask from \"./CreateTask\";\n\nfunction Content(props) {\n\n  const todo_start = [\n    {\n      id: 11,\n      name: 'Create F1',\n      priority: 10\n    },\n    // <--\n    {\n      id: 12,\n      name: 'Create F2',\n      priority: 23\n    } ,\n    {\n      id: 13,\n      name: 'Create F3',\n      priority: 25\n    }\n  ]\n  const progress_start = [\n    {\n      id: 15,\n      name: 'Create F4',\n      priority: 16\n    },\n    {\n      id: 14,\n      name: 'Create F5',\n      priority: 20\n    }\n  ]\n  const review_start = [\n    {\n      id: 17,\n      name: 'Create F6',\n      priority: 15\n    },\n    {\n      id: 16,\n      name: 'Create F7',\n      priority: 9\n    }\n  ]\n  const done_start = [\n    {\n      id: 19,\n      name: 'Create F8',\n      priority: 40\n    }\n  ];\n\n  const  [dolist, setDolist] = useState(todo_start);\n  const  [progress, setProgress] = useState(progress_start);\n  const  [review, setReview] = useState(review_start);\n  const  [done, setDone] = useState(done_start);\n\n  const addnewtask = (newtask) => {\n    console.log(\"newtaskid\",newtask);\n\n    setDolist(dolist => [...dolist,newtask]);\n\n    console.log(\"WholeList\",dolist);\n  }\n  const move_up = (id,currentlist,setList) => {\n    console.log(id);\n    let post=null;\n    let index=0;\n\n    currentlist.map( (el,i) => {\n                if(el.id===id) {  post=el; index=i; }\n    })\n    if (index===0) return;\n\n    let listcopy = [...currentlist];\n    listcopy.splice(index, 1);\n    listcopy.splice((index-1), 0, post);\n    setList(listcopy)\n  };\n\n  const move_down = (id,currentlist,setList ) => {\n    console.log(id);\n    let post=null;\n    let index=0;\n\n    currentlist.map( (el,i) => {\n      if(el.id===id) {  post=el; index=i; }\n    })\n    if (index===currentlist.length-1) return;\n\n    let listcopy = [...currentlist];\n    listcopy.splice(index, 1);\n    listcopy.splice((index+1), 0, post);\n    setList(listcopy)\n  };\n\n  const delete_post = (id,currentlist,setList ) => {\n    console.log(id);\n    setList( currentlist.filter( el => (el.id!==id) ));\n  };\n\n  const move_right = (id,currentlist,rightlist, setList, setRightList) => {\n    console.log(id);\n    let templist = [];\n    let temp_el = null;\n\n    currentlist.forEach( el => {\n          if (el.id===id) { temp_el= el; }\n          else { templist.push(el) };\n    })\n\n    setList(templist); //Удаляем задание из тек списка\n\n    templist=[...rightlist];\n    templist.push(temp_el);\n\n    setRightList( templist )  //Вставляем элемент в другой список\n  };\n\n  const move_left = (id,currentlist,leftlist, setList,setLeftList) => {\n    console.log(id);\n    let templist = [];\n    let temp_el = null;\n\n    currentlist.forEach( el => {\n      if (el.id===id) { temp_el= el; }\n      else { templist.push(el) };\n    })\n\n    setList(templist); //Удаляем задание из тек списка\n\n    templist=[...leftlist];\n    templist.push(temp_el);\n\n    setLeftList( templist ) //Вставляем элемент в другой список\n  };\n\n  const sort_bypriority = (currentlist, setList ) => {\n    let listcopy = [...currentlist];\n    let sortedlist=[];\n    let max=-1, index_max=0;\n\n    while (listcopy.length!==0){\n        let max=-1, index_max=0;\n\n        listcopy.forEach( (el,i) => {\n            if (el.priority > max) {\n                  max=el.priority;\n                  index_max = i;\n                  }\n            })\n        sortedlist.push(listcopy[index_max]);\n        listcopy.splice(index_max,1);\n    }\n    setList(sortedlist);\n  }\n\n  return (\n      <div className=\"content\">\n\n          <h1>Kanban</h1>\n          <h1>-------------------------</h1>\n\n          <CreateTask addnewtask={addnewtask} />\n\n          <h1>-------------------------</h1>\n\n          <div className=\"row\">\n            <div className=\"col\">\n              To do ---\n              <button className=\"btn btn-primary\" onClick={() => sort_bypriority(dolist,setDolist )  }>\n                  Sort by priority </button>\n              <ul>\n                { dolist.map(el => <Board  el={el}\n                                           currentlist={dolist}\n                                           rightlist={progress}\n                                           leftlist={null}\n                                           setList={setDolist}\n                                           setRightList={setProgress}\n\n                                           delete_post={delete_post}\n                                           move_up={move_up}\n                                           move_down={move_down}\n                                           move_right={move_right}\n                                           move_left={false} />) }\n              </ul>\n            </div>\n\n            <div className=\"col\">\n              In progress---\n              <button className=\"btn btn-primary\" onClick={() => sort_bypriority(progress,setProgress )  }>\n                  Sort by priority </button>\n              <ul>\n                { progress.map(el => <Board  el={el}\n                                             currentlist={progress}\n                                             rightlist={review}\n                                             leftlist={dolist}\n                                             setList={setProgress}\n                                             setLeftList={setDolist}\n                                             setRightList={setReview}\n\n                                             delete_post={delete_post}\n                                             move_up={move_up}\n                                             move_down={move_down}\n                                             move_right={move_right}\n                                             move_left={move_left}  />) }\n              </ul>\n            </div>\n\n            <div className=\"col\">\n              Review---\n              <button className=\"btn btn-primary\" onClick={() => sort_bypriority(review,setReview )  }>\n                      Sort by priority </button>\n              <ul>\n                { review.map(el => <Board  el={el}\n                                           currentlist={review}\n                                           rightlist={done}\n                                           leftlist={progress}\n                                           setList={setReview}\n                                           setLeftList={setProgress}\n                                           setRightList={setDone}\n\n                                           delete_post={delete_post}\n                                           move_up={move_up}\n                                           move_down={move_down}\n                                           move_right={move_right}\n                                           move_left={move_left}  />) }\n              </ul>\n            </div>\n\n            <div className=\"col\">\n              Done---\n              <button className=\"btn btn-primary\" onClick={() => sort_bypriority(done,setDone )  }>\n                      Sort by priority </button>\n              <ul>\n                { done.map(el => <Board  el={el}\n                                         currentlist={done}\n                                         rightlist={null}\n                                         leftlist={review}\n                                         setList={setDone}\n                                         setLeftList={setReview}\n\n                                         delete_post={delete_post}\n                                         move_up={move_up}\n                                         move_down={move_down}\n                                         move_right={false}\n                                         move_left={move_left}  />) }\n              </ul>\n            </div>\n\n          </div>\n\n      </div>\n\n  );\n}\n\nexport default Content;","import React, { useState } from 'react';\nimport './App.css';\nimport Content from './Content';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"Content\">\n      <Content/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}